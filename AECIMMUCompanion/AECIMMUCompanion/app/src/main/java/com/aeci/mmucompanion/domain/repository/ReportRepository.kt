package com.aeci.mmucompanion.domain.repository

import com.aeci.mmucompanion.domain.model.*
import kotlinx.coroutines.flow.Flow
import java.io.File

interface ReportRepository {
    
    /**
     * Get paginated report history with optional filtering
     */
    suspend fun getReportHistory(
        page: Int = 1,
        limit: Int = 10,
        filter: ReportFilter? = null
    ): Result<ReportHistory>
    
    /**
     * Get reports generated by current user
     */
    suspend fun getMyReports(
        page: Int = 1,
        limit: Int = 10
    ): Result<ReportHistory>
    
    /**
     * Generate a new report
     */
    suspend fun generateReport(
        request: ReportGenerationRequest
    ): Result<ReportGenerationResult>
    
    /**
     * Download a specific report
     */
    suspend fun downloadReport(
        reportId: String,
        localFilePath: String? = null
    ): Result<File>
    
    /**
     * Delete a report (Admin only)
     */
    suspend fun deleteReport(reportId: String): Result<Unit>
    
    /**
     * Get report statistics
     */
    suspend fun getReportStatistics(): Result<ReportStatistics>
    
    /**
     * Get available report templates
     */
    suspend fun getReportTemplates(): Result<List<ReportTemplate>>
    
    /**
     * Get report by ID
     */
    suspend fun getReportById(reportId: String): Result<Report>
    
    /**
     * Search reports
     */
    suspend fun searchReports(
        query: String,
        page: Int = 1,
        limit: Int = 10
    ): Result<ReportHistory>
    
    /**
     * Get report download history for a specific report
     */
    suspend fun getReportDownloadHistory(reportId: String): Result<List<ReportDownload>>
    
    /**
     * Upload and store a report file
     */
    suspend fun uploadReport(
        reportType: ReportType,
        reportTitle: String,
        format: ExportFormat,
        file: File,
        parameters: Map<String, Any>? = null,
        formIds: List<String> = emptyList()
    ): Result<ReportGenerationResult>
    
    /**
     * Get reports by type
     */
    suspend fun getReportsByType(
        reportType: ReportType,
        page: Int = 1,
        limit: Int = 10
    ): Result<ReportHistory>
    
    /**
     * Get reports by date range
     */
    suspend fun getReportsByDateRange(
        startDate: Long,
        endDate: Long,
        page: Int = 1,
        limit: Int = 10
    ): Result<ReportHistory>
    
    /**
     * Check if user can access report
     */
    suspend fun canAccessReport(reportId: String): Result<Boolean>
    
    /**
     * Get report metadata
     */
    suspend fun getReportMetadata(reportId: String): Result<ReportMetadata>
    
    /**
     * Export multiple reports as a bundle
     */
    suspend fun exportReportsBundle(
        reportIds: List<String>,
        bundleName: String
    ): Result<File>
    
    /**
     * Schedule automatic report generation
     */
    suspend fun scheduleReport(schedule: ReportSchedule): Result<String>
    
    /**
     * Get scheduled reports
     */
    suspend fun getScheduledReports(): Result<List<ReportSchedule>>
    
    /**
     * Cancel scheduled report
     */
    suspend fun cancelScheduledReport(scheduleId: String): Result<Unit>
    
    /**
     * Sync reports with server
     */
    suspend fun syncReports(): Result<Unit>
    
    /**
     * Get offline cached reports
     */
    fun getCachedReports(): Flow<List<Report>>
    
    /**
     * Cache report for offline access
     */
    suspend fun cacheReport(reportId: String): Result<Unit>
    
    /**
     * Clear cached reports
     */
    suspend fun clearReportCache(): Result<Unit>
} 